#!/bin/sh
set -e

# Set defaults
: "${INSTALL_DISK:=/dev/sda}"
: "${INSTALL_SWAP_SIZE:=1G}"
: "${INSTALL_USER:=patrick}"
: "${INSTALL_HOSTNAME:=arch-setup}"

# Infer for networking
INSTALL_EN=$(ip link | sed '/^[0-9]*: \(en[^:]*\):.*$/!d; s//\1/' | head -n 1)
INSTALL_EN=${INSTALL_EN:-en0} # let it proceed with dummy value

INSTALL_WLAN=$(ip link | sed '/^[0-9]*: \(wl[^:]*\):.*$/!d; s//\1/' | head -n 1)
INSTALL_WLAN=${INSTALL_WLAN:-wlan0} # let it proceed with dummy value

case "${1:-system}" in
  system)
    timedatectl set-ntp true

    sgdisk --clear \
      --new=0:0:+512M --typecode=0:EF00 \
      --new=0:0:0 \
      "$INSTALL_DISK"

    mkfs.fat -F32 "${INSTALL_DISK}1"

    cryptsetup -y -v luksFormat "${INSTALL_DISK}2"
    cryptsetup open "${INSTALL_DISK}2" cryptroot
    mkfs.ext4 /dev/mapper/cryptroot

    mount /dev/mapper/cryptroot /mnt
    mkdir /mnt/boot
    mount "${INSTALL_DISK}1" /mnt/boot

    pacstrap /mnt base
    genfstab -U /mnt >>/mnt/etc/fstab

    cp "$0" /mnt/
    arch-chroot /mnt ./install system-chroot
    reboot
    ;;

  system-chroot)
    # Timezone
    ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
    hwclock --systohc

    # Locale
    sed -i 's/^#\(en_US.UTF-8\)/\1/' /etc/locale.gen
    locale-gen
    echo 'LANG=en_US.UTF-8' >/etc/locale.conf

    # Hostname
    echo "$INSTALL_HOSTNAME" >/etc/hostname
    cat <<EOM >/etc/hosts
# Static table lookup for hostnames.
# See hosts(5) for details.
127.0.0.1 localhost.localdomain localhost
::1       localhost.localdomain localhost

$INSTALL_HOSTNAME $INSTALL_HOSTNAME.localdomain localhost
EOM

    # Boot
    sed -i 's/ filesystems / encrypt filesystems /' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    bootctl --path=/boot install
    cat >/boot/loader/loader.conf <<EOM
default arch
timeout 3
editor 0
EOM

    uuid=$(blkid "${INSTALL_DISK}2" -s UUID | cut -d\" -f 2)

    cat >/boot/loader/entries/arch.conf <<EOM
title Arch Linux
linux /vmlinuz-linux
initrd /initramfs-linux.img
options cryptdevice=UUID=$uuid:cryptroot root=/dev/mapper/cryptroot rw
EOM

    pacman -S --needed --noconfirm intel-ucode

    # Swap
    fallocate -l "$INSTALL_SWAP_SIZE" /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo '/swapfile swap swap defaults 0 0' >>/etc/fstab

    # Networking
    pacman -S --needed --noconfirm wpa_supplicant wpa_actiond dialog ifplugd
    systemctl enable "netctl-auto@$INSTALL_WLAN"
    systemctl enable "netctl-ifplugd@$INSTALL_EN"
    cat >"/etc/netctl/${INSTALL_EN}-ethernet" <<EOM
Description='DHCP ethernet connection'
Interface=$INSTALL_EN
Connection=ethernet
IP=dhcp
EOM

    echo "For root user:"
    while ! passwd; do echo "Try again"; done

    # Setup nonroot user
    pacman -S --needed --noconfirm \
      base-devel \
      grml-zsh-config \
      neovim \
      sudo \
      zsh

    echo '%wheel ALL=(ALL) NOPASSWD:ALL' >/etc/sudoers.d/100-wheel

    ln -s /usr/bin/nvim /usr/local/bin/vim
    chsh -s /bin/zsh
    useradd -m -G wheel -s /bin/zsh "$INSTALL_USER"

    echo "For $INSTALL_USER:"
    while ! passwd "$INSTALL_USER"; do echo "Try again"; done

    # Setup for next stage
    cp install "/home/$INSTALL_USER/"
    chown "$INSTALL_USER:$INSTALL_USER" "/home/$INSTALL_USER/install"

    cat >"/home/$INSTALL_USER/.zshrc" <<'EOM'
echo "Continuing arch-setup/install in 3..."
sleep 3 # usually need to give networking a second
./install user
EOM
    chown "$INSTALL_USER:$INSTALL_USER" "/home/$INSTALL_USER/.zshrc"
    ;;

  user)
    # Bootstrap Aurget
    curl -# https://aur.archlinux.org/cgit/aur.git/snapshot/aurget.tar.gz |
      tar fxz -
    (cd ./aurget && makepkg -i -r -s --noconfirm) && rm -rf ./aurget

    # X
    sudo pacman -S --needed --noconfirm \
      xorg \
      xorg-xinit \
      xf86-video-intel \
      xf86-input-synaptics \
      xterm \
      ttf-dejavu \
      chromium \
      gmrun \
      dmenu

    sudo tee /etc/X11/xorg.conf.d/10-keyboard.conf <<EOM
Section "InputClass"
  Identifier "Keyboard Defaults"
  MatchIsKeyboard "yes"
  Option "XkbOptions" "ctrl:nocaps"
EndSection
EOM

    # ACPID
    sudo pacman -S --needed --noconfirm acpid acpi hdparm sdparm wireless_tools
    sudo systemctl enable acpid
    sudo systemctl start acpid
    aurget -S --deps --noedit --noconfirm --skippgpcheck laptop-mode-tools
    sudo systemctl enable laptop-mode
    sudo systemctl start laptop-mode

    sudo tee /etc/acpi/handler.sh <<'EOM'
#!/bin/sh

amixer_() {
  # Workaround
  amixer -c 0 sset Headphone unmute
  amixer -c 0 sset Speaker unmute
  amixer "$@"
}

notify() {
  /home/patrick/.local/bin/runx notify-send "$@"
}

logger -t acpid "$*"

case "$1" in
  battery) notify "Battery Event" "$(acpi)" ;;
  button/f20) amixer -c 0 sset Capture toggle ;; # mic mute
  button/mute) amixer_ -c 0 sset Master toggle ;;
  button/volumedown) amixer_ -c 0 sset Master '3%-' ;;
  button/volumeup) amixer_ -c 0 sset Master '3%+' ;;
  video/brightnessup)
    read -r val < /sys/class/backlight/intel_backlight/brightness
    echo $((val+77)) > /sys/class/backlight/intel_backlight/brightness
    ;;
  video/brightnessdown)
    read -r val < /sys/class/backlight/intel_backlight/brightness
    echo $((val-77)) > /sys/class/backlight/intel_backlight/brightness
    ;;
  #*) notify "ACPI Event" "$(printf "%s\n" "$@")" ;;
esac
EOM

    # Docker
    sudo pacman -S --needed --noconfirm docker docker-compose docker-machine
    sudo mkdir -p /etc/systemd/system/docker.service.d
    sudo tee /etc/systemd/system/docker.service.d/override.conf <<EOM
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// -s overlay2
EOM
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo gpasswd -a "$USER" docker

    # Other packages
    sudo pacman -S --needed --noconfirm \
      alsa-utils \
      aws-cli \
      dunst \
      elinks \
      fcron \
      fzf \
      git \
      gnupg \
      hdparm \
      htop \
      hub \
      isync \
      jq \
      jre-openjdk-headless \
      msmtp \
      mutt \
      openssh \
      pass \
      postgresql-libs \
      ruby \
      rxvt-unicode \
      scrot \
      shfmt \
      slock \
      truecrypt \
      urxvt-perls \
      weechat \
      wget \
      xautolock \
      xclip \
      xdotool \
      zsh

    aurget -S --deps --noedit --noconfirm --skippgpcheck \
      browserpass \
      heroku-cli \
      rcm \
      zoom

    # Dotfiles
    echo "For $USER@$(hostname) SSH key:"
    ssh-keygen -t rsa -b 4096
    curl -F 'sprunge=<-' http://sprunge.us <~/.ssh/id_rsa.pub
    echo "Install this key in GitHub/GitLab. Then enter to continue."
    read -r

    if git clone git@github.com:pbrisbin/dotfiles ~/.dotfiles; then
      git clone git@gitlab.com:pbrisbin/password-store.git ~/.password-store
    else
      # Assume that failed because we didn't install the SSH keys. We can still
      # finish the set up using an HTTP clone of my dotfiles
      git clone https://github.com/pbrisbin/dotfiles ~/.dotfiles
    fi

    # Avoid prompting
    rcup -f

    # Monitor hotplugging
    sudo tee /etc/udev/rules.d/99-monitor-hotplug.rules <<EOM
KERNEL=="card0", SUBSYSTEM=="drm", RUN+="/home/$INSTALL_USER/.local/bin/runx msu"
EOM

    # XMonad
    aurget -S --deps --noedit --noconfirm --skippgpcheck stack-static
    stack setup
    stack install xmonad xmonad-contrib

    echo
    echo "Done. Most things won't work until you log out/in again."
    ;;
  *)
    echo "Invalid stage: $1" >&2
    echo "  must be system|system-chroot|user" >&2
    exit 1
    ;;
esac
